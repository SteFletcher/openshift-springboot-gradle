buildscript {
     ext {
         springBootVersion = '1.5.3.RELEASE'
     }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.com.stefletcher.gradle-javabase-plugin:javabaseplugin:1.0.13"
		classpath "gradle.plugin.com.iadams.gradle:gradle-openshift-plugin:0.1-RC1"
		classpath "se.transmode.gradle:gradle-docker:1.2"
    }
}

apply plugin: 'com.stefletcher.gradle-javabase-plugin'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'com.iadams.openshift-base'
apply plugin: 'docker'

version = "${System.env.TRAVIS_BUILD_NUMBER}".length() < 1 ? "1.0.$System.env.TRAVIS_BUILD_NUMBER" : '0.0.3-SNAPSHOT'
sourceCompatibility = 1.8

jar {
	baseName = "$rootProject.name"
	version = "$version"
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	// https://mvnrepository.com/artifact/com.hazelcast/hazelcast
	compile group: 'com.hazelcast', name: 'hazelcast', version: '3.9.3'
	// https://mvnrepository.com/artifact/com.hazelcast/hazelcast-client
    compile group: 'com.hazelcast', name: 'hazelcast-client', version: '3.9.3'
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

// openshift {
// 	baseUrl = "${baseUrl}"
// 	auth {
// 		username = "${openshift_user}"
// 		password = "${openshift_password}"
// 	}
// }
openshift {
	baseUrl = 'https://192.168.99.100:8443'
	auth {
		username = 'developer'
		password = 'developer'
	}

}
task createDockerFile(){
	doLast {
		File dockerfile = new File("build/openshift/Dockerfile")
		dockerfile.text = """FROM java:8
ADD $jar.archiveName app.jar
RUN bash -c 'touch /app.jar'
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
"""
	}
}

task copyJar(type: Copy){
	from("build/libs/$jar.archiveName")
	into('build/openshift/')
}

task buildDocker(type: Docker, dependsOn: [build, copyJar, createDockerFile]) {
  applicationName = jar.baseName
  dockerfile = file('build/openshift/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}

task createBuildTarBall(type: Tar, dependsOn: [build, copyJar, createDockerFile]) {
  from files('build/openshift/') {
	  include "**/Dockerfile", "**/*.jar"
  }
  destinationDir = file('build/openshift/')
  archiveName = 'build.tar.gz'
  compression = Compression.GZIP
}

project.ext.namespace = project.ext.namespace ?: "myproject"

task startBuild(type: com.iadams.gradle.openshift.tasks.OpenShiftStartBuildTask, dependsOn: createBuildTarBall) {
	namespace = "$project.ext.namespace"
	watch = true
	buildName = 'mvc-app'
	dockerTar = file('build/openshift/build.tar.gz')
}

//task tagBuild(type: com.iadams.gradle.openshift.tasks.OpenShiftTagTask) {
//	namespace = "$project.ext.namespace"
//	imageName = 'mvc-app'
//	tag = "$version"
//}

//startBuild.finalizedBy tagBuild

import io.fabric8.kubernetes.api.model.ContainerPort
import io.fabric8.openshift.api.model.DeploymentConfigBuilder
import io.fabric8.openshift.api.model.DeploymentTriggerPolicyBuilder

task createDeployment(type: com.iadams.gradle.openshift.tasks.OpenShiftCreateDeploymentTask) {
	namespace = "$project.ext.namespace"
	def deploymentName = project.ext.dcname ?: "$rootProject.name"
	deployment = new DeploymentConfigBuilder()
				.withNewMetadata()
					.withName("$deploymentName")
				.endMetadata()
				.withNewSpec()
					.withReplicas(1)
					.withTriggers(new DeploymentTriggerPolicyBuilder().withType('ConfigChange').build())
					.addToSelector('app',"$deploymentName")
					.withNewTemplate()
						.withNewMetadata()
							.addToLabels('app', "$deploymentName")
						.endMetadata()
						.withNewSpec()
							.addNewContainer()
								.withName("$deploymentName")
								.withImage("172.30.1.1:5000/${namespace}/mvc-app:$version")
								.addNewPort()
									.withContainerPort(8280)
								.endPort()
							.endContainer()
						.endSpec()
					.endTemplate()
				.endSpec()
				.withNewStatus()
					.withLatestVersion(0L)
				.endStatus()
				.build()
}

task deploy(type: com.iadams.gradle.openshift.tasks.OpenShiftStartDeploymentTask, dependsOn: createDeployment) {
	namespace = "$project.ext.namespace"
	deployment = project.ext.dcname ?: "$rootProject.name"
	
	doLast {
		println deployment
		client.services().inNamespace("$project.ext.namespace").withName("${deployment}").createOrReplaceWithNew()
				.withNewMetadata()
					.withName("${deployment}")
				.endMetadata()
				.withNewSpec()
					.withPorts()
						.addNewPort()
							.withName("8280-8280")
							.withPort(8280)
							.withNewTargetPort(8280)
						.endPort()
					.addToSelector("app", "${deployment}")
					.endSpec().done()
		println deployment
		client.routes().inNamespace("$project.ext.namespace").withName("${deployment}").createOrReplaceWithNew()
				.withNewMetadata()
					.withName("${deployment}")
					.withNamespace("$project.ext.namespace")
				.endMetadata()
				.withNewSpec()
					.withNewTo()
						.withKind("Service")
						.withName("${deployment}")
					.endTo()
				.endSpec().done()
	}
}

task createService() {
	// oc create service clusterip openshift-springboot-gradle --tcp=8280:8280 bootshift-mvc
}

task createRoute() {
//	oc expose svc openshift-springboot-gradle
}
